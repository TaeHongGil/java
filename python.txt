from itertools import permutations,combinations
순열 조합


    prime=[True]*(int(max))
    m=int(max)**0.5) #최대약수
    for i in range(2, m + 1):
        if prime[i] == True:  # i가 소수인 경우
            for j in range(i + i, (max), i):  # i이후 i의 배수들을 False 판정
                prime[j] = False
에라토스테네스의 체


Input : li = [1, 2, 3]
Output : result = [1, 4, 9]
풀이
result = list(map(lambda i: i ** 2 , li))
map(함수,리스트) > 리스트 값에 함수적용


import heapq
힙정렬
heapq.heappush(pq, -i) >   최대힙> -1곱한다.



list(set(asd ))>asd리스트의 중복제거
s1 & s2 교집합
s1 | s2  합집합
s1 - s2 차집합


for i, v in enumerate(t):  enumerate("재미있는 파이썬")
	print("index : {}, value: {}".format(i,v))       >인덱스번호와 값 출력

index : 0, value: 재 				
index : 1, value: 미
index : 2, value: 있
index : 3, value: 는
index : 4, value: 
index : 5, value: 파
...

check in num     num안에 check가있으면 true


from collections import Counter


cnt = Counter([i[1] for i in clothes])
print(cnt.values(),cnt.keys())
>>dict_values([2, 1, 1]) dict_keys(['a', 'b', 'c'])

>> answer = reduce(lambda x, y: x*(y+1), cnt.values(),1)   초기값 1에 cnt값(y)를쭉~계산


from functools import reduce
reduce(lambda x, y: x + y, [0, 1, 2, 3, 4])
0~4더함


filter(lambda x: x < 5, range(10))
[0, 1, 2, 3, 4]  


                         0
                    2             -2
            5            -1   1          -5 
             . ..                    ... 
  
  bfs넓이우선탐색      - 타겟넘버 참고


가장큰정사각형
11            11
11      >>  12 이렇게 바꿔줌  >> DP(동적계획법)


split(",") ,로문자열 잘라서 리스트에


if int(digit) not in answer 안에없으면!

import re
\d - 숫자와 매치, [0-9]와 동일한 표현식이다.
\D - 숫자가 아닌 것과 매치, [^0-9]와 동일한 표현식이다.
\s - whitespace 문자와 매치, [ \t\n\r\f\v]와 동일한 표현식이다. 맨 앞의 빈 칸은 공백문자(space)를 의미한다.
\S - whitespace 문자가 아닌 것과 매치, [^ \t\n\r\f\v]와 동일한 표현식이다.
\w - 문자+숫자(alphanumeric)와 매치, [a-zA-Z0-9_]와 동일한 표현식이다.
\W - 문자+숫자(alphanumeric)가 아닌 문자와 매치, [^a-zA-Z0-9_]와 동일한 표현식이다.
match()	문자열의 처음부터 정규식과 매치되는지 조사한다.
search()	문자열 전체를 검색하여 정규식과 매치되는지 조사한다.
findall()	정규식과 매치되는 모든 문자열(substring)을 리스트로 돌려준다.
finditer()	정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 돌려준다.

>>문자열에서 뽑아낼때 (정렬할때)


>>> format(42, 'b')
'101010'
>>> format(42, 'o')
'52'
>>> format(42, 'x')
'2a'
>>> format(42, 'X')
'2A'
>>> format(42, 'd')
'42'


list(zip(*arr2))  행>열 변환

eval("100+200") >>문자열수식계산
abs(-1)>1 절댓값

#s.title() 주어진 문자열에서 알파벳 외의 문자(숫자, 특수기호, 띄어쓰기 등)로 나누어져 있는 영단어들의 첫 글자를 모두 대문자로 변환시킨다.
#s.capitalize() 주어진 문자열에서 맨 첫 글자를 대문자로 변환시킨다.

import math
math.gcd(a,b) a,b의 최대공약수
math.lcm(a,b) 최소공배수

// 정수로나누기
/ 실수로나누기


딕셔너리
name={}
name[i[1]]=i[2]
{'uid1234': 'Prodo', 'uid4567': 'Ryan'}
오픈채팅방 참고


ord("A") >번호
import string
list(string.ascii_uppercase)>대문자알파벳리스트


Union-Find 알고리즘
https://m.blog.naver.com/ndb796/221230967614
